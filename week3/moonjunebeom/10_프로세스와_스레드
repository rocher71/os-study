# 프로세스 개요

- 프로세스 : 실행중인 프로그램( 한 프로그램으로 다수 프로세스 가능 )
    - 포그라운드 프로세스 : 사용자가 보는 앞에서 실행되는 프로세스
    - 백그라운드 프로세스 : 사용자가 보지 못하는 뒤에서 실행되는 프로세스
        - 데몬( 유닉스 ) / 서비스 ( 윈도우 ) : 사용자와 상호작용 X 백그라운드 프로세스

## 프로세스 제어 블록

- PCB : OS가 프로세스에 CPU 등의 자원을 배분
- 프로세스와 관련된 정보를 저장하는 자료구조
- 커널 영역에 생성

![image.png](attachment:137d4ef2-7502-4ce3-b683-47d7325d46aa:image.png)

### PCB에 저장되는 정보

- 프로세스 ID( PID ) : 프로세스의 고유 번호
- 레지스터 값 : 실행 차례 됐을 시 이전 작업 이어 수행하기 위함
- 프로세스 상태 : 입출력장치 기다리는중 or CPU 기다리는중 or  CPU사용중 …
- CPU 스케줄링 정보 : 언제 어떻게 CPU 할당받을지
- 메모리 관리 정보 : 메모리 어디에 저장되어있는지
- 사용한 파일과 입출력장치 목록

## 문맥 교환( 프로세스간 실행 전환 )

- 문맥 : 프로세스 재개 위해 기억하는 정보 : PCB에 저장
- 문맥 교환 : 문맥을 PCB로부터 복구하여 새로운 프로세스 실행

![image.png](attachment:2e3df1a6-d26f-47b7-9ce4-397502844b88:image.png)

![image.png](attachment:97dc6046-7bf9-4018-ba60-dde3007a8463:image.png)

## 프로세스의 메모리 영역

- 커널 영역 : PCB
- 사용자 영역 : 코드 영역, 데이터 영역, 힙 영역, 스택 영역

![image.png](attachment:5846714c-bdf2-4498-bf6a-bd93802a5093:image.png)

### 코드 영역( 텍스트 영역 )

- CPU가 실행할 명령어 저장
- Read Only ( 쓰기 금지됨 )
- 정적 할당 영역 : 크기가 고정된 영역

### 데이터 영역

- 프로그램 실행 중 유지할 데이터 저장
    - 전역 변수
- 정적 할당 영역 : 크기가 고정된 영역

### 힙 영역

- 프로그래머가 직접 할당할 수 있는 저장 공간
    - 할당했다면 반환 필요
        - 반환 X시 memory leek
- 동적 할당 영역 : 크기가 변할 수 있는 영역

### 스택 영역

- 데이터를 일시적으로 저장하는 공간
    - 매개 변수, 지역 변수
- 동적 할당 영역 : 크기가 변할 수 있는 영역

![image.png](attachment:1fdd4c39-e0aa-4041-acb4-d5c7343a01eb:image.png)

# 프로세스 상태와 계층 구조

## 프로세스 상태

### 생성 상태

- 프로세스 생성 중 상태
- 메모리에 적재됨 → PCB를 할당 받은 상태

### 준비 상태

- CPU할당받아 실행 가능
- 순서 기다리는 상태

### 실행 상태

- CPU할당받아 실행 중 상태

### 대기 상태

- 실행 중 IO장치 작업 기다리는 상태
    - 다시 준비상태로

### 종료 상태

- 프로세스 종료된 상태
    - OS : PCB, 프로세스가 사용한 메모리 정리

![image.png](attachment:4ce112ba-1a4c-451c-8ed2-b149342c4280:image.png)

## 프로세스 계층 구조

- 프로세스 : 다른 프로세스 생성 가능( 시스템 콜 )
    - 부모 프로세스 / 자식 프로세스
    - PPID : 부모 프로세스의 PID

## 프로세스 생성 기법

- 복제와 옷갈아입기로 자식 프로세스 생성
- fork
    - 자신의 복사본 만드는 시스템 콜
    - PID 값, 메모리에 저장된 위치 등 제외한 정보 동일
- exec
    - 자신의 메모리 공간을 새로운 프로그램으로 덮어쓰는 시스템 콜
    - 코드 영역, 데이터 영역이 실행할 프로그램의 내용으로 바뀜
    - 나머지 영역 초기화

![image.png](attachment:cf9e6f51-afbe-49ef-924c-0596eb29cb65:image.png)

# 스레드

- 스레드 : 프로세스를 구성하는 실행의 흐름 단위
    - 1 프로세스 : 다수 스레드 가능

## 프로세스와 스레드

- 단일 스레드 프로세스 : 실행의 흐름 단위가 하나
- 멀티 스레드 프로세스 : 실행의 흐름 단위가 다수

![image.png](attachment:ef68d939-a631-4ce6-8649-18a4dfe821a7:image.png)

![image.png](attachment:1b681fee-69f8-4373-858a-63e50b57e55d:image.png)

- 스레드
    - 프로세스 내에서 각기 다른 레드 ID, 레지스터 값, 스택으로 구성
        - 각기 다른 코드 실행 가능
        - 이외의 프로세스의 데이터 공유
        

![image.png](attachment:64ef6c37-5da9-4acb-9e03-1037d38c0074:image.png)

## 멀티프로세스와 멀티 스레드

- 멀티 프로세스 : 여러 프로세스 동시 실행
- 멀티 스레드 : 프로세스를 여러 스레드로 동시 실행

![image.png](attachment:d6886fee-d182-4975-b35b-d36d1bba610b:image.png)

여러 프로세스로 병행 실행 vs 여러 스레드로 병행 실행

- 다중 스레드
    - 프로세스의 자원을 공유할 수 있음 + 상호 통신 유리
    - 하나의 스레드 문제 → 다른 스레드 영향

![image.png](attachment:927f61d4-69c3-4bce-8f61-f1aea01a9598:image.png)

![image.png](attachment:650f0fb5-40b7-41cb-8472-aec2cd66623b:image.png)

![image.png](attachment:999126c5-938d-478e-ab90-d0fe5f5d2d5d:image.png)

- 프로세스 간 통신 (IPC)
    - 공유 가능 메모리 영역 사용하여 수행(shared memory)
    - 소켓, 파이프 사용하여 수행
