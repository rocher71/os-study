# 동기화란

프로세스들의 실행 순서와 자원의 일관성 보장 위함

## 동기화의 의미

- 프로세스들 사이의 수행 시기를 맞추는 것
    - 실행 순서 제어 : 동시에 실행되는 프로세스를 올바른 순서대로 실행하는 것
    - 상호 배제 : 공유 불가능 자원의 동시 사용 제한

## 생상자와 소비자 문제

- 동시 접근 안되는 자원에 동시 접근할 경우 발생

## 공유 자원과 임계 구역

- 공유 자원 : 전역 변수, 파일, io장치 등의 프로세스들이 공유하는 자원
    - 동시 접근 불가능한 공유 자원 존재
- 임계 구역 : 동시 실행 시 문제가 발생하는 자원에 접근하는 코드 영역
    - 두 프로세스 동시 접근 → 한 프로세스 종료 시까지 대기 필요
    - 레이스 컨디션 : 동시에 임계 구역 코드 실행하여 문제 발생
        - 데이터 일관성 깨짐
- 상호 배제를 위한 동기화
    - 원칙
        - 상호 배제( mutual exclusion ) : 한 프로세스가 진입했다면 다른 프로세스는 진입 불가능
        - 진행 ( progress ) : 임계 구역에 진입한 프로세스 없다면 진입하고자하는 프로세스는 진입 가능해야함
        - 유한 대기 ( bounded waiting ) : 무한정 대기해서는 안됨

# 동기화 기법

## 뮤텍스 락

진입할 때 자물쇠 걸고 나올 때 해제하는 방식 ( 전역변수 lock 사용 )

- acquire 함수 : 프로세스가 진입 전 호출하는 함수
    - 임계구역 확인, 열려 있다면 lock을 true로
- release 함수 : 임계구역에서 작업 끝난 후 호출하는 함수
    - lock을 false로

→ acquire : 계속 확인해야함 ( busy wait )

![image.png](attachment:05bd9c8e-72e7-46ab-ac17-749c6f8eb015:image.png)

![image.png](attachment:ca257e91-3d82-49f5-8c01-5f3557228968:image.png)

## 세마포( semaphore )

공유 자원이 여러 개 있는 경우 적용 가능 ( 전역 변수 S 사용 )

- wait 함수 : 들어가도 될지 말지 알려주는 함수
- signal 함수 : 대기하는 프로세스 가도 좋다 신호하는 함수

![image.png](attachment:444e5394-a831-4506-86bd-e506e3aa90eb:image.png)

![image.png](attachment:9709d59c-fea3-4fcd-816c-d4a6cf33035e:image.png)

![image.png](attachment:59c92db9-e706-42f6-958d-f3073b4f4dd9:image.png)

## 모니터( monitor )

- 공유 자원과 해당 자원에 접근 위한 통로 묶어서 관리
- 프로세스는 해당 통로로만 공유 자원 접근

![image.png](attachment:4e0e39e6-32b1-4d2e-87f8-f0e83feb81d6:image.png)

- 조건 변수 : 프로세스 실행 순서 제어 위한 변수
    - wait , signal 연산 수행 가느ㅇ
    - wait : 호출한 프로세스 대기상태로, 일시적으로 조건 변수에 대한 대기 큐에 삽입
    - signal : wait 연산으로 중지된 프로세스 실행 재개

![image.png](attachment:07dca482-3d91-45d8-bf87-612a2d46909f:image.png)

![image.png](attachment:787adfa8-dc8c-4691-8766-32ffd7d51f06:image.png)
