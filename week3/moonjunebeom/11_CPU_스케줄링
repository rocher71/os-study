# CPU 스케줄링 개요

CPU 스케줄링 : OS가 프로세스들에게 CPU자원 배분

## 프로세스 우선순위

- 프로세스마다 우선순위 존재
    - 보통 입출력 작업 많으면 우선순위 높음
    - 프로세스마다 입출력 장치 이용 시간 / CPU이용 시간 차이 존재
        - 입출력 집중 프로세스 : 입출력 작업 많은 프로세스
            - 대기 상태가 더 많음
            - 잠시 실행하면 곧 대기상태 → 우선순위 높
        - CPU 집중 프로세스 : CPU작업이 많은 프로세스
            - 실행 상태가 더 많음
        
- OS : 프로세스마다 우선순위 부여
    - PCB에 명시

## 스케줄링 큐

- 각 자원을 사용하고 싶은 프로세스들 줄 세우기
- 준비 큐 : CPU 이용하고 싶은 프로세스
- 대기 큐 : 입출력장치 이용하고 싶은 프로세스

![image.png](attachment:fc912a51-28c0-425d-8489-2be3d4b4994a:image.png)

## 선점형과 비선점형 스케줄링

- 선점형 스케줄링
    - OS가 프로세스로부터 자원 빼앗아 다른 프로세스에 할당
    - 자원 독점 방지, 골고루 배분 가능
    - 문맥 교환 → 오버헤드
- 비선점형 스케줄링
    - 사용중인 프로세스가 종료 or 대기상태 전까지 끼어들 수 없음
    - 문맥교환 적음
    - 골고루 사용하진 못함

# CPU 스케줄링 알고리즘

## 스케줄링 알고리즘의 종류

### FCFS 스케줄링

- 비선점형
- 큐에 삽입된 순서대로 처리
- 호위 효과 발생 가능( 프로세스 수행 시간에 비해 긴 대기 시간 가능)

### SJF (최단 작업 우선) 스케줄링

- 비선점형 → 선점형으로 구현도 가능
- 삽입 된 프로세스 중 최단 작업 시간 프로세스부터 실행

### 라운드 로빈 스케줄링

- 선점형
- FCFS + 타임 슬라이스
- 시간 지나면 다음 프로세스로

### SRT (최소 잔여 시간 우선) 스케줄링

- 선점형
- SJF + RR
- 타임슬라이스 후 최단 잔여 시간 우선

### 우선순위 스케줄링

- 우선순위 순 실행
- starvation 현상 가능
    - 에이징 기법으로 해결

### 다단계 큐 스케줄링

- 우선순위 스케줄링의 발전
- 우선순위 별 큐 생성
- 큐 별로 타임슬라이스 설정 가능
    - → 큐 별로 다른 스케줄링 기법 사용 가능

### 다단계 피드백 큐 스케줄링

- 다단계 큐 스케줄링의 발전
- 프로세스가 큐 사이 이동 가능( starvation 해결 )
    - 타임슬라이스 동안 끝내지 못한 프로세스 : 더 낮은 우선순위 큐로 이동
    - 마지막 큐 : 에이징 기법으로 starvation 예방 가능
